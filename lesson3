SQL

lesson3-1---------------------------------

exercise1.sql
SELECT goals
FROM players
WHERE name = "ウィル";

exercise2.sql
SELECT *
FROM players
WHERE goals > 14;

lesson3-2---------------------------------

サブクエリ

SQLではクエリの中に他のクエリを入れることができる
この他のクエリをサブクエリという
2つ以上のクエリを1つにまとめることができる

SELECT name
FROM players
WHERE goals > (
  SELECT goalsF
  FROM players
  WHERE name = "ウィル"
);

()で囲むことで、サブクエリを使用できる
()内にセミコロンは不要
セミコロンはクエリの最後にだけ書けばよい

サブクエリの実行順番
サブクエリが実行された後、外側にあるクエリが実行される

exercise2.sql
SELECT name, goals
FROM players
WHERE goals > (
  SELECT AVG(goals)
  FROM players
);


lesson3-3---------------------------------

ASの使い方

ASを使うことでカラム名などに別名を定義することができる
「カラム名 AS "名前"」で、カラム名に定義する名前を指定する

SELECT goals AS "ウィルの得点数"
FROM players
WHERE name = ”ウィル";

exercise2.sql
SELECT SUM(goals) AS "チームの合計得点"
FROM players;


lesson3-4---------------------------------

exercise1.sql
「日本よりもランキングの高井国のデータを取得しよう」
SELECT *
FROM countries
WHERE rank < (
  SELECT rank
  FROM countries
  WHERE name = "日本"
);


lesson3-5---------------------------------

テーブルを紐づける

テーブル同士を一緒に使うためには、外部キーが設定されたカラムと主キーが設定されたカラムが必要
外部キーで他のテーブルにある主キーを指定することで、テーブル同士を紐づけることができる

exercise1.sql
紐づいたテーブルの出身国ごとの合計得点数を取得する
SELECT SUM(goals), country_id
FROM players
GROUP BY country_id; //出身国ごとの合計を出したいのでグループ化する


lesson3-6---------------------------------

JOIN(1)
テーブルの結合

JOINとは
JOINは複数のテーブルを1つに結合したいときに使う
ONで条件を指定して、テーブルAにテーブルBを結合する
結合したテーブルは1つのテーブルとしてデータを取得することができる

SELECT *
FROM テーブルA
JOIN テーブルB
ON 結合条件

結合条件
ON テーブル名.カラム名 = テーブル名.カラム名

例：
SELECT *
FROM players
JOIN countries
ON players.country_id = coutries.id;
　　　　　　　外部キー　　　　主キー

JOINの実行順序
JOINを含んだクエリでは、はじめにJOINが実行される
その次に、結合されたテーブルに対してSELECTが実行される
①まずは最初にテーブルを結合する
FROM players
JOIN countries
ON players.country_id = coutries.id;
②結合された後にSELECTが実行される
SELECT *


lesson3-7---------------------------------

JOIN(2)
複数テーブルでのカラムの指定

複数のテーブルに同じカラム名が存在するときは、「テーブル名.カラム名」で指定しないといけない
例：
SELECT players.name, countries.name
FROM players
JOIN countries
ON players.country_id = countries.id
WHERE players.name = "ウィル";

全体実行順序
SQLは取得するテーブルを形成してから検索を行うので、FROM, JOINが先に行われる
 上から順に
テーブルの指定　FROM
結合　ON・JOIN
取得条件　WHERE
グループ化　GROUP BY
関数　COUNT・SUM・AVG・MIN
HAVING
検索　SELECT・DISTINCT
順序　ORDER BY
LIMIT

exercise2.sql
「出身国ごとの合計得点を取得する」
SELECT countries.name, SUM(goals)
FROM players
JOIN countries
ON players.country_id = countries.id
GROUP BY countries.name;

lesson3-8---------------------------------

外部キーにNULLがあるときはJOINを使うことはできるが、NULLのレコードは
飛ばされて実行結果には反映されない

exercise2.sql
SELECT players.name AS "選手名", teams.name AS "前年所属していたチーム"
FROM players
JOIN teams
ON players.previous_team_id = teams.id;


lesson3-9---------------------------------

NULLの場合の取得
「LEFT JOIN」を使うと、外部キーがNULLのレコードも実行結果に表示できる

SELECT *
FROM players
LEFT JOIN teams
ON players.previous_team_id = teams.id;


lesson3-10--------------------------------

3つ以上のテーブルの結合
JOINを複数使うことで複数のテーブルを結合できる
JOINを複数回使用しても、FROMは1度だけ書けばよいので注意

SELECT *
FROM players
JOIN countries
ON players.country_id = countries.id
LEFT JOIN teams
ON players.previous_team_id = teams.id;


lesson3-11--------------------------------

総合演習

exercise1.sql
SELECT name AS "選手名", height AS "身長"
FROM players
WHERE height > )
  SELECT AVG(height)
  FROM players
);

exercise2.sql
SELECT *
FROM players
JOIN countries
ON players.country_id = countries.id
WHERE countries.name = "日本"
AND height >= 180;

exercise3.sql
SELECT countries.name AS "国名", AVG(goals) AS "平均得点"
FROM players
JOIN countries
ON player.country_id = countries.id
GROUP BY countries.name;
